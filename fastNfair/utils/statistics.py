import torch
from sklearn import metrics

# y_true -> true labels of dataset
# y_pred -> predicted labels of dataset generated by classifier
# s -> sensitive attributes of dataset

def confusion_matrix(y_true, y_pred, pos_label=1):
    # returns (tp, fp, fn, tn)
    neg_label = 1 - pos_label
    # indices where positives and negatives occur in true labels
    positive_idx = (y_true == pos_label)
    negative_idx = (y_true == neg_label)
    # tp : true positives (# correctly labeled as true)
    tp = (y_pred[positive_idx] == pos_label).sum()
    # tn : true negatives (# correctly labeled as false)
    tn = (y_pred[negative_idx] == neg_label).sum()
    # fp : false positives (# incorrectly labeled as true)
    fp = (y_pred[negative_idx] == pos_label).sum()
    # fn : false negative (# incorrectly labeled as false)
    fn = (y_pred[positive_idx] == neg_label).sum()
    return tp, fp, fn, tn


def compute_statistics(true_labels, pred_labels, pos_label=1):

    # confusion matrix
    tp, fp, fn, tn = confusion_matrix(true_labels.reshape(-1), pred_labels.reshape(-1), pos_label=pos_label)

    # total number of positives
    p = tp + fn

    # total number of negatives
    n = fp + tn

    # accuracy
    acc = (tp + tn) / (p + n)

    # true positive rate (sensitivity, recall, hit rate, 1 - fnr)
    tpr = torch.tensor(torch.nan) if p == 0 else tp / p

    # true negative rate (specificity, selectivity, 1 - fpr)
    tnr = torch.tensor(torch.nan) if n == 0 else tn / n

    # false positive rate (fall-out, 1 - tnr)
    fpr = torch.tensor(torch.nan) if n == 0 else fp / n

    # false negative rate (miss rate, 1 - tpr)
    fnr = torch.tensor(torch.nan) if p == 0 else fn / p

    # precision (positive predictive value, 1 - fdr)
    ppv = tp / (tp + fp)

    # negative predictive value (1 - FOR)
    npv = tn / (tn + fn)

    # false discovery rate (1 - ppv)
    fdr = fp / (fp + tp)

    # false omission rate (1 - npv)
    FOR = fn / (fn + tn)

    # f1 score
    f1 = 2 * (ppv * tpr) / (ppv + tpr)

    info = {'TP': tp.item() if isinstance(tp, torch.Tensor) else tp,
            'FP': fp.item(),
            'FN': fn.item(),
            'TN': tn.item(),
            'P': p.item(), 'N': n.item(), 'accuracy': acc.item(), 'F1': f1.item(),
            'TPR': tpr.item(), 'FPR': fpr.item(), 'TNR': tnr.item(), 'FNR': fnr.item(),
            'PPV': ppv.item(), 'NPV': npv.item(), 'FDR': fdr.item(), 'FOR': FOR.item()}

    return info


def independence(y_true, y_pred, s):
    # calculate P(y_pred = (0 or 1) | s = (0 or 1))
    # Numbers of occurrences of s = 0 and s = 1, respectively
    num_s0 = (s == 0).sum()
    num_s1 = (s == 1).sum()
    # num_sm_yn represents the number of occurrences of the joint condition s = m and y_pred = n
    num_s0_y0 = (y_pred[s == 0] == 0).sum()
    num_s0_y1 = (y_pred[s == 0] == 1).sum()
    num_s1_y0 = (y_pred[s == 1] == 0).sum()
    num_s1_y1 = (y_pred[s == 1] == 1).sum()
    # take ratios of numbers of occurrences to get P(y_hat = n|s = m)
    prob_y0_s0 = num_s0_y0 / num_s0
    prob_y1_s0 = num_s0_y1 / num_s0
    prob_y0_s1 = num_s1_y0 / num_s1
    prob_y1_s1 = num_s1_y1 / num_s1
    # populate a dictionary of dictionaries with the above probabilities
    out = {'y = 0': {'s = 0': 0.0, 's = 1': 0.0},
           'y = 1': {'s = 0': 0.0, 's = 1': 0.0}
           }
    y0 = out["y = 0"]
    y0["s = 0"] = round(prob_y0_s0.item(),4)
    y0["s = 1"] = round(prob_y0_s1.item(),4)
    y1 = out["y = 1"]
    y1["s = 0"] = round(prob_y1_s0.item(),4)
    y1["s = 1"] = round(prob_y1_s1.item(),4)

    return out

def separation(y_true, y_pred, s):
    # returns out
    out = {'y = 0': {'s = 0': 0.0, 's = 1': 0.0},
           'y = 1': {'s = 0': 0.0, 's = 1': 0.0}
           }
    # calculate P = (y_pred = 1 | y_true = (0 or 1) , s = (0 or 1))
    combinations = [(0,0),(1,0),(0,1),(1,1)]

    for y_true_value, s_value in combinations:
        probability = 0.0
        # identify elements where condition is met
        condition_met = (y_true == y_true_value) & (s == s_value)

        # check if the condition is ever met
        if condition_met.numel() != 0:
            # if so, calculate the probability
            probability_tensor = y_pred[condition_met].sum() / y_pred[condition_met].numel()
            probability = round(probability_tensor.item(), 4) # change output from tensor() to float

        out["y = %s" % y_true_value]["s = %s" % s_value] = probability
    return out


def sufficiency(y_true, y_pred, s):
    # returns out
    out = {}
    # conditions for (y_pred=0, s=0), (y_pred=0, s=1), (y_pred=1, s=0), and (y_pred=1, s=1) since both are binary
    conditions = [(0, 0), (0, 1), (1, 0), (1, 1)]

    # calculate the probability P(y_true = 1 | y_pred = (0 or 1), s = (0 or 1))
    for y_pred_value, s_value in conditions:
        # locate indices where condition is met
        condition_met = (y_pred == y_pred_value) & (s == s_value)

        # check whether the condition occurs
        if condition_met.sum() > 0:
            # if so, divide the # of occurences where y_true = 1 by the total number
            probability = y_true[condition_met].sum() / y_true[condition_met].numel()

        else:
            probability = 0.0  # handle the case when the condition never occurs

        # populate output dictionary
        if "y_pred = %s" % y_pred_value not in out:
            out["y_pred = %s" % y_pred_value] = {}
        s_key = "s = %s" % s_value
        out["y_pred = %s" % y_pred_value][s_key] = round(probability.item(), 4)
    return out


def fairness_metrics(y_true, y_pred, s):
    out_ind = independence(y_true, y_pred, s)
    out_sep = separation(y_true, y_pred, s)
    out_suf = sufficiency(y_true, y_pred, s)

    out = {'independence': out_ind,
           'separation': out_sep,
           'sufficiency': out_suf
           }
    return out


def store_statistics(z, y_pred, x, y_true):
    out = compute_statistics(y_true, y_pred)
    cm = metrics.confusion_matrix(y_true, y_pred)
    fpr, tpr, _ = metrics.roc_curve(y_true, z.detach(), pos_label=1)
    auc = metrics.auc(fpr, tpr)

    return {'stats': out, 'cm': cm, 'fpr': fpr, 'tpr': tpr, 'auc': auc}

def fairness_metrics_test():
    y_true = torch.tensor([0,1,0,1,0,1,0,1,0,1])
    y_pred = torch.tensor([0,1,1,0,0,0,1,1,0,1])
    s =      torch.tensor([1,1,1,1,1,0,0,0,0,0])
    print('y_true: ', y_true)
    print('y_pred: ', y_pred)
    print('     s: ', s)
    ind_pass = (independence(y_true,y_pred,s) == {'y = 0': {'s = 0': 0.4, 's = 1': 0.6}, 'y = 1': {'s = 0': 0.6, 's = 1': 0.4}})
    print('Independence passed: ', ind_pass)
    sep_pass = (separation(y_true,y_pred,s) == {'y = 0': {'s = 0': 0.5, 's = 1': 0.3333}, 'y = 1': {'s = 0': 0.6667, 's = 1': 0.5}})
    print('Separation passed: ', sep_pass)
    suf_pass = (sufficiency(y_true,y_pred,s) == {'y_pred = 0': {'s = 0': 0.5, 's = 1': 0.3333}, 'y_pred = 1': {'s = 0': 0.6667, 's = 1': 0.5}})
    print('Sufficiency passed: ', suf_pass)

    passed = (ind_pass & sep_pass & suf_pass)
    return passed


if __name__ == "__main__":
    # create synthetic data

    # for reproducibility
    torch.manual_seed(42)

    # choose number of samples
    n_samples = 10

    # true label
    y_true = torch.zeros(n_samples, dtype=torch.int8)
    y_true[torch.randperm(n_samples)[:n_samples // 2]] = 1

    # true attribute
    s = torch.zeros(n_samples, dtype=torch.int8)
    s[torch.randperm(n_samples)[:n_samples // 2]] = 1

    # predicted label
    y_pred = torch.zeros_like(y_true)
    y_pred[torch.randperm(n_samples)[:6]] = 1

    (tp, fp, fn, tn) = confusion_matrix(y_true, y_pred, pos_label=1)
    out_ind = independence(y_true, y_pred, s)
    out_sep = separation(y_true, y_pred, s)
    out_suf = sufficiency(y_true, y_pred, s)

    #fairness_metrics_test()







